import { useEffect, useState } from "react";

import "./TrackEdl.scss";

import imageMapResize from "image-map-resizer";

import frontCar from "./cotesAvant.png";
import conducteurCar from "./cotesConducteur.png";
import backCar from "./cotesDerriere.png";
import passagerCar from "./cotesPassager.png";
import { queryAdmin } from "../../../../../utilitaires/serveurAdmin";
import { queryBdd } from "../../../../../utilitaires/serveurBdd";


function TrackEdl({ setParentCurrentRender, id, type, admin }) {
    const [croixRouge, setCroixRouge] = useState([]);

    useEffect(() => {
        async function fetchCroixRouge(id) {
            const fetchedCroixRougePickUp = await queryAdmin("edls", {
                revisionId: id,
                typeEdl: "edlPickUp"
            });

            const fetchedCroixRougeDropUp = await queryAdmin("edls", {
                revisionId: id,
                typeEdl: "edlDropUp"
            });

            let fetchedCroixRouge = Object.assign([], fetchedCroixRougePickUp.default);
            if (type === "edlDropUp")
                fetchedCroixRouge = fetchedCroixRouge.concat(fetchedCroixRougeDropUp.default);

            setCroixRouge(fetchedCroixRouge);

            return fetchedCroixRouge;
        }

        if (admin)
            queryBdd("/updateRevisionStatus", {
                revisionId: id,
                statusChoisie: type,
                newValue: "enCours"
            });

        imageMapResize();
        fetchCroixRouge(id);
    }, [id, type, admin]);

    const handlerClose = () => {
        setParentCurrentRender(null);
        window.location.reload();
    }

    const handlerAddCroix = async (e) => {
        if (admin) {
            const commentaire = prompt("Décrivez le défaut : ");
            // layerX et Y ne sont standardisé !
            const posX = e.nativeEvent.layerX - 6;
            const posY = e.nativeEvent.layerY - 8;

            const newCroixRouge = {
                commentaire,
                posX,
                posY,
            };

            const oldCroixRouge = Object.assign([], croixRouge);
            oldCroixRouge.push(newCroixRouge);

            await queryAdmin("updateRevisionEdl", {
                revisionId: id,
                typeEdl: type,
                edls: newCroixRouge
            });

            setCroixRouge(oldCroixRouge);
        }
    }

    const handlerTerminer = async (e) => {
        await queryBdd("/updateRevisionStatus", {
            revisionId: id,
            statusChoisie: type,
            newValue: "end"
        });

        handlerClose();
    }

    return (
        <div id="TrackEdl">
            <span id="clickable" onClick={handlerClose}>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 15 15">
                    <path id="Tracé_7" data-name="Tracé 7" d="M20,6.511,18.489,5,12.5,10.989,6.511,5,5,6.511,10.989,12.5,5,18.489,6.511,20,12.5,14.011,18.489,20,20,18.489,14.011,12.5Z" transform="translate(-5 -5)" />
                </svg>
            </span>

            {/* <!-- Image Map Generated by http://www.image-map.net/ --> */}
            <img src={frontCar} useMap="#image-map-front" alt="" />
            <map name="image-map-front">
                <area alt="" onClick={handlerAddCroix} coords="224,415,331,409,458,417,530,425,544,455,602,465,633,433,639,376,641,307,634,215,599,169,600,157,636,156,646,116,612,100,588,105,575,128,565,128,521,39,473,4,378,1,239,4,172,12,146,25,121,54,106,83,88,123,80,137,74,111,52,98,30,103,6,120,1,140,32,156,51,157,57,168,35,191,17,237,12,310,19,379,20,407,23,445,40,460,87,464,117,442,120,419" shape="poly" />
            </map>

            <img src={conducteurCar} className="reajustSize" useMap="#image-map-conducteur" alt="" />
            <map name="image-map-conducteur">
                <area alt="" onClick={handlerAddCroix} coords="486,298,761,291,779,289,820,342,871,355,918,341,943,315,963,291,1031,287,1094,272,1107,193,1088,168,1088,120,1072,93,1021,86,933,65,785,3,614,5,532,4,486,16,424,33,320,80,286,96,237,109,173,113,57,140,23,164,2,207,10,243,23,290,69,310,110,309,123,318,137,337,175,358,215,355,262,325,277,300" shape="poly" />
            </map>

            <img src={backCar} useMap="#image-map-back" alt="" />
            <map name="image-map-back">
                <area alt="" onClick={handlerAddCroix} coords="129,380,508,381,512,441,530,447,512,440,598,449,615,439,622,408,624,363,625,318,627,239,602,183,598,158,605,134,595,125,572,116,557,103,525,47,462,10,402,8,336,12,322,5,314,10,177,16,131,31,104,59,81,97,72,113,45,123,36,140,44,152,40,167,16,217,6,259,7,309,17,347,11,383,21,433,44,445,84,445,114,438,125,416" shape="poly" />
            </map>

            <img src={passagerCar} className="reajustSize" useMap="#image-map-passager" alt="" />
            <map name="image-map-passager">
                <area alt="" onClick={handlerAddCroix} coords="351,296,825,299,840,323,872,346,907,358,952,348,992,312,1018,304,1081,291,1098,255,1098,188,1079,153,991,121,850,101,813,92,732,49,635,13,480,0,340,3,274,19,224,40,176,68,129,85,54,90,27,102,18,134,20,158,24,171,8,186,4,214,5,245,18,274,48,286,143,293,157,298,166,317,185,337,223,355,254,356,298,338,322,306" shape="poly" />
            </map>

            {admin &&
                <button onClick={handlerTerminer}>Terminer</button>
            }

            {croixRouge &&
                croixRouge.map(croix =>
                    <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 15 15" key={croix.posX + croix.posY}
                        style={{
                            position: "absolute",
                            top: croix.posY + "px",
                            left: croix.posX + "px"
                        }}>
                        <path id="Tracé_14" data-name="Tracé 14" d="M20,6.511,18.489,5,12.5,10.989,6.511,5,5,6.511,10.989,12.5,5,18.489,6.511,20,12.5,14.011,18.489,20,20,18.489,14.011,12.5Z" transform="translate(-5 -5)" fill="#db0000" />
                    </svg>
                )
            }
        </div>
    )
}

export default TrackEdl;